plugins {
    id 'java'
    id 'application'
    // https://plugins.gradle.org/plugin/com.gradleup.shadow
    id 'com.gradleup.shadow' version '8.3.8'
    id 'com.diffplug.spotless' version '7.2.1'
    id 'net.ltgt.errorprone' version '4.3.0'
}

group = 'io.github.eisopux'
version = '0.2.0'

repositories {
    mavenCentral()
}

configurations {
    requireJavadoc
}

ext {
    eisopVersion = '3.49.3-eisop1'
}

dependencies {
    implementation "io.github.eisop:checker:$eisopVersion"
    implementation "io.github.eisop:checker-qual:$eisopVersion"
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.24.0'
    implementation 'com.google.code.gson:gson:2.13.1'
    implementation 'commons-cli:commons-cli:1.9.0'
    implementation 'com.google.guava:guava:33.4.8-jre'
    testImplementation 'junit:junit:4.13.2'

    if (JavaVersion.current() >= JavaVersion.VERSION_17) {
        errorprone('com.google.errorprone:error_prone_core:2.40.0')
        errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
    }
    requireJavadoc('org.plumelib:require-javadoc:2.0.0')
}

task requireJavadoc(type: JavaExec, group: 'Documentation') {
    description = 'Ensures that Javadoc documentation exists in source code.'
    mainClass = 'org.plumelib.javadoc.RequireJavadoc'
    classpath = configurations.requireJavadoc
    args 'src/main/java'
    jvmArgs += [
        '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
    ]
}

application {
    // Define the main class for the application
    mainClass = 'org.checkerframework.languageserver.ServerMain'
}

shadowJar {
    minimize()
    dependencies {
        // Minimize does not remove the annotated JDK, properties, and astub files
        exclude(dependency('io.github.eisop:checker'))
    }
}

tasks.withType(JavaCompile) { compilationTask ->
    options.compilerArgs += ['-Xlint', '-Werror']
    options.errorprone.enabled = JavaVersion.current() >= JavaVersion.VERSION_17
}

spotless {
    java {
        googleJavaFormat().aosp()
        importOrder('com', 'jdk', 'lib', 'lombok', 'org', 'java', 'javax')
        formatAnnotations()
    }
    groovyGradle {
        target '*.gradle'
        importOrder()
        greclipse()  // which formatter Spotless should use to format .gradle files.
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
    }
}
